package view;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.paint.CycleMethod;
import javafx.scene.paint.LinearGradient;
import javafx.scene.paint.Stop;
import javafx.scene.shape.Circle;
import javafx.scene.shape.QuadCurve;
import javafx.scene.shape.Rectangle;

public class Window extends Pane {
	Stop[] R = new Stop[] { new Stop(0, Color.rgb(246, 17, 0)), new Stop(1, Color.rgb(250, 76, 31))};
	LinearGradient toplg = new LinearGradient(0, 0, 0, 1, true, CycleMethod.NO_CYCLE, R);
	Stop[] RO = new Stop[] { new Stop(0, Color.rgb(250, 80, 33)), new Stop(1, Color.rgb(255, 140, 67))};
	LinearGradient toplrlg = new LinearGradient(0, 0, 0, 1, true, CycleMethod.NO_CYCLE, RO);
	Stop[] OG = new Stop[] { new Stop(0, Color.rgb(248, 156, 83)), new Stop(1, Color.rgb(252, 195, 102))};
	LinearGradient FirstRowToplg = new LinearGradient(0, 0, 0, 1, true, CycleMethod.NO_CYCLE, OG);
	Stop[] OG2 = new Stop[] { new Stop(0, Color.rgb(251, 177, 92)), new Stop(1, Color.rgb(253, 215, 114))};
	LinearGradient FirstRowlg = new LinearGradient(0, 0, 0, 1, true, CycleMethod.NO_CYCLE, OG2);
	Stop[] GG = new Stop[] { new Stop(0, Color.rgb(227, 255, 162)), new Stop(1, Color.rgb(218, 254, 167))};
	LinearGradient SecondRowlg = new LinearGradient(0, 0, 0, 1, true, CycleMethod.NO_CYCLE, GG);
	Stop[] GB = new Stop[] { new Stop(0, Color.rgb(203, 248, 200)), new Stop(1, Color.rgb(206, 243, 210))};
	LinearGradient ThirdRowlg = new LinearGradient(0, 0, 0, 1, true, CycleMethod.NO_CYCLE, GB);
	Stop[] OG3 = new Stop[] { new Stop(0, Color.rgb(254, 209, 110)), new Stop(1, Color.rgb(250, 254, 142))};
	LinearGradient firstRowMiddlelg = new LinearGradient(0, 0, 0, 1, true, CycleMethod.NO_CYCLE, OG3);
	Stop[] OG4 = new Stop[] { new Stop(0, Color.rgb(255, 227, 121)), new Stop(1, Color.rgb(247, 254, 144))};
	LinearGradient firstRowlrlg = new LinearGradient(0, 0, 0, 1, true, CycleMethod.NO_CYCLE, OG4);
	Stop[] GG2 = new Stop[] { new Stop(0, Color.rgb(213, 251, 168)), new Stop(1, Color.rgb(203, 250, 176))};
	LinearGradient SecondRowqlg = new LinearGradient(0, 0, 0, 1, true, CycleMethod.NO_CYCLE, GG2);
	Stop[] GB2 = new Stop[] { new Stop(0, Color.rgb(207, 243, 214)), new Stop(1, Color.rgb(209, 237, 222))};
	LinearGradient ThirdRowqlg = new LinearGradient(0, 0, 0, 1, true, CycleMethod.NO_CYCLE, GB2);
	Stop[] GG3 = new Stop[] { new Stop(0, Color.rgb(250, 254, 142)), new Stop(1, Color.rgb(227, 254, 159))};
	LinearGradient FirstRowToprlg = new LinearGradient(0, 0, 0, 1, true, CycleMethod.NO_CYCLE, GG3);
	Stop[] GG4 = new Stop[] { new Stop(0, Color.rgb(247, 254, 144)), new Stop(1, Color.rgb(227, 254, 159))};
	LinearGradient FirstRowlrrlg = new LinearGradient(0, 0, 0, 1, true, CycleMethod.NO_CYCLE, GG4);
	Stop[] GB3 = new Stop[] { new Stop(0, Color.rgb(203, 250, 176)), new Stop(1, Color.rgb(200, 246, 194))};
	LinearGradient SecondRowrlg = new LinearGradient(0, 0, 0, 1, true, CycleMethod.NO_CYCLE, GB3);
	Stop[] BB = new Stop[] { new Stop(0, Color.rgb(209, 237, 222)), new Stop(1, Color.rgb(215, 232, 240))};
	LinearGradient ThirdRowrlg = new LinearGradient(0, 0, 0, 1, true, CycleMethod.NO_CYCLE, BB);
	
	
	public Window() {
		addCircles();
		addQuadCurve();
		addSquares();
	}

	private void addCircles() {
		Circle cTop = new Circle(160,70,40);
		cTop.setFill(toplg);
		Circle cTopLeft = new Circle(100,150,40);
		Circle cTopRight = new Circle(220,150,40);
		cTopLeft.setFill(toplrlg);
		cTopRight.setFill(toplrlg);
		Circle cFirstRowTop = new Circle(160,220,25);
		cFirstRowTop.setFill(FirstRowToplg);
		Circle cFirstRowLeft = new Circle(90,250,25);
		Circle cFirstRowRight = new Circle(230,250,25);
		cFirstRowLeft.setFill(FirstRowlg);
		cFirstRowRight.setFill(FirstRowlg);
		Circle cSecondRowLeft = new Circle(90,440,25);
		Circle cSecondRowMiddle = new Circle(160,440,25);
		Circle cSecondRowRight = new Circle(230,440,25);
		cSecondRowLeft.setFill(SecondRowlg);
		cSecondRowMiddle.setFill(SecondRowlg);
		cSecondRowRight.setFill(SecondRowlg);
		Circle cThirdRowLeft = new Circle(90,620,25);
		Circle cThirdRowMiddle = new Circle(160,620,25);
		Circle cThirdRowRight = new Circle(230,620,25);
		cThirdRowLeft.setFill(ThirdRowlg);
		cThirdRowMiddle.setFill(ThirdRowlg);
		cThirdRowRight.setFill(ThirdRowlg);
		getChildren().addAll(cTop,cTopLeft,cTopRight,cFirstRowTop,cFirstRowLeft,cFirstRowRight,cSecondRowLeft,cSecondRowMiddle,cSecondRowRight,cThirdRowLeft,cThirdRowMiddle,cThirdRowRight);
	}

	private void addQuadCurve() {
		QuadCurve qFirstRowMiddle = new QuadCurve();
		qFirstRowMiddle.setStartX(140.0); 
		qFirstRowMiddle.setStartY(310.0); 
		qFirstRowMiddle.setEndX(180.0); 
		qFirstRowMiddle.setEndY(310.0); 
		qFirstRowMiddle.setControlX(160.0); 
		qFirstRowMiddle.setControlY(190.0); 
		qFirstRowMiddle.setFill(firstRowMiddlelg);
		QuadCurve qFirstRowLeft = new QuadCurve();
		qFirstRowLeft.setStartX(70.0);
		qFirstRowLeft.setStartY(340.0);
		qFirstRowLeft.setEndX(110.0);
		qFirstRowLeft.setEndY(340.0);
		qFirstRowLeft.setControlX(90.0);
		qFirstRowLeft.setControlY(220.0);
		qFirstRowLeft.setFill(firstRowlrlg);
		QuadCurve qFirstRowRight = new QuadCurve();
		qFirstRowRight.setStartX(210.0);
		qFirstRowRight.setStartY(340.0);
		qFirstRowRight.setEndX(250.0);
		qFirstRowRight.setEndY(340.0);
		qFirstRowRight.setControlX(230.0);
		qFirstRowRight.setControlY(220.0);
		qFirstRowRight.setFill(firstRowlrlg);
		QuadCurve qSecondRowLeft = new QuadCurve();
		qSecondRowLeft.setStartX(70.0);
		qSecondRowLeft.setStartY(510.0);
		qSecondRowLeft.setEndX(110.0);
		qSecondRowLeft.setEndY(510.0);
		qSecondRowLeft.setControlX(90.0);
		qSecondRowLeft.setControlY(430.0);
		qSecondRowLeft.setFill(SecondRowqlg);
		QuadCurve qSecondRowMiddle = new QuadCurve();
		qSecondRowMiddle.setStartX(140.0);
		qSecondRowMiddle.setStartY(510.0);
		qSecondRowMiddle.setEndX(180.0);
		qSecondRowMiddle.setEndY(510.0);
		qSecondRowMiddle.setControlX(160.0);
		qSecondRowMiddle.setControlY(430.0);
		qSecondRowMiddle.setFill(SecondRowqlg);
		QuadCurve qSecondRowRight = new QuadCurve();
		qSecondRowRight.setStartX(210.0);
		qSecondRowRight.setStartY(510.0);
		qSecondRowRight.setEndX(250.0);
		qSecondRowRight.setEndY(510.0);
		qSecondRowRight.setControlX(230.0);
		qSecondRowRight.setControlY(430.0);
		qSecondRowRight.setFill(SecondRowqlg);
		QuadCurve qThirdRowLeft = new QuadCurve();
		qThirdRowLeft.setStartX(70.0);
		qThirdRowLeft.setStartY(690.0);
		qThirdRowLeft.setEndX(110.0);
		qThirdRowLeft.setEndY(690.0);
		qThirdRowLeft.setControlX(90.0);
		qThirdRowLeft.setControlY(615.0);
		qThirdRowLeft.setFill(ThirdRowqlg);
		QuadCurve qThirdRowMiddle = new QuadCurve();
		qThirdRowMiddle.setStartX(140.0);
		qThirdRowMiddle.setStartY(690.0);
		qThirdRowMiddle.setEndX(180.0);
		qThirdRowMiddle.setEndY(690.0);
		qThirdRowMiddle.setControlX(160.0);
		qThirdRowMiddle.setControlY(615.0);
		qThirdRowMiddle.setFill(ThirdRowqlg);
		QuadCurve qThirdRowRight = new QuadCurve();
		qThirdRowRight.setStartX(210.0);
		qThirdRowRight.setStartY(690.0);
		qThirdRowRight.setEndX(250.0);
		qThirdRowRight.setEndY(690.0);
		qThirdRowRight.setControlX(230.0);
		qThirdRowRight.setControlY(615.0);
		qThirdRowRight.setFill(ThirdRowqlg);
		getChildren().addAll(qFirstRowMiddle, qFirstRowLeft, qFirstRowRight, qSecondRowLeft, qSecondRowRight, qSecondRowMiddle, qThirdRowLeft, qThirdRowRight, qThirdRowMiddle);
	}

	private void addSquares() {
		Rectangle rFirstRowMiddle = new Rectangle();
		rFirstRowMiddle.setX(140.0);
		rFirstRowMiddle.setY(310.0);
		rFirstRowMiddle.setWidth(40.0);
		rFirstRowMiddle.setHeight(100.0);
		rFirstRowMiddle.setFill(FirstRowToprlg);
		Rectangle rFirstRowLeft = new Rectangle();
		rFirstRowLeft.setX(70.0);
		rFirstRowLeft.setY(340.0);
		rFirstRowLeft.setHeight(70.0);
		rFirstRowLeft.setWidth(40.0);
		rFirstRowLeft.setFill(FirstRowlrrlg);
		Rectangle rFirstRowRight = new Rectangle();
		rFirstRowRight.setX(210.0);
		rFirstRowRight.setY(340.0);
		rFirstRowRight.setHeight(70.0);
		rFirstRowRight.setWidth(40.0);
		rFirstRowRight.setFill(FirstRowlrrlg);
		Rectangle rSecondRowLeft = new Rectangle();
		rSecondRowLeft.setX(70.0);
		rSecondRowLeft.setY(510.0);
		rSecondRowLeft.setHeight(80.0);
		rSecondRowLeft.setWidth(40.0);
		rSecondRowLeft.setFill(SecondRowrlg);
		Rectangle rSecondRowMiddle = new Rectangle();
		rSecondRowMiddle.setX(140.0);
		rSecondRowMiddle.setY(510.0);
		rSecondRowMiddle.setHeight(80.0);
		rSecondRowMiddle.setWidth(40.0);
		rSecondRowMiddle.setFill(SecondRowrlg);
		Rectangle rSecondRowRight = new Rectangle();
		rSecondRowRight.setX(210.0);
		rSecondRowRight.setY(510.0);
		rSecondRowRight.setHeight(80.0);
		rSecondRowRight.setWidth(40.0);
		rSecondRowRight.setFill(SecondRowrlg);
		Rectangle rThirdRowLeft = new Rectangle();
		rThirdRowLeft.setX(70.0);
		rThirdRowLeft.setY(690.0);
		rThirdRowLeft.setWidth(40.0);
		rThirdRowLeft.setHeight(90.0);
		rThirdRowLeft.setFill(ThirdRowrlg);
		Rectangle rThirdRowMiddle = new Rectangle();
		rThirdRowMiddle.setX(140.0);
		rThirdRowMiddle.setY(690.0);
		rThirdRowMiddle.setWidth(40.0);
		rThirdRowMiddle.setHeight(90.0);
		rThirdRowMiddle.setFill(ThirdRowrlg);
		Rectangle rThirdRowRight = new Rectangle();
		rThirdRowRight.setX(210.0);
		rThirdRowRight.setY(690.0);
		rThirdRowRight.setHeight(90.0);
		rThirdRowRight.setWidth(40.0);
		rThirdRowRight.setFill(ThirdRowrlg);
		getChildren().addAll(rFirstRowMiddle, rFirstRowLeft, rFirstRowRight,rSecondRowLeft, rSecondRowRight, rSecondRowMiddle, rThirdRowLeft, rThirdRowRight,rThirdRowMiddle);
	}

}
